{"version":3,"sources":["library.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["weightedPicker","weights","console","assert","every","w","partial_sums","arr","map","psum","val","accumulate","total_sum","pop","rand","Math","random","x","L","length","lo","hi","mi","floor","lowerBound","sequenceToImageData","width","height","sequence","resclaed","xs","ys","min","max","xmin","xmax","ymin","ymax","scale","y","rescale","board","Array","fill","forEach","flatMap","row","b","createImageData","Uint8ClampedArray","from","parseIfs","input","split","s","filter","c","parseFloat","r","SIZE","Canvas","props","canvasRef","useRef","useEffect","context","current","getContext","ifs","iteration","points","picker","push","a","d","e","f","generateSequenceFromIfs","imageData","putImageData","ref","IfsForm","useState","ifsString","setIfsString","iterationString","setIterationString","setIfs","parseInt","setIteration","style","border","onSubmit","event","preventDefault","type","value","onChange","target","rows","cols","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d3e3190.chunk.js","sourcesContent":["import { createImageData } from 'canvas';\n\nexport const lowerBound = (arr: number[], x: number) => {\n  const L = arr.length;\n  if (x <= arr[0]) {\n    return 0;\n  }\n  let lo = 0;\n  let hi = L;\n  while (hi - lo >= 2) {\n    console.assert(arr[lo] < x && (hi === L || x <= arr[hi]));\n    const mi = Math.floor((lo + hi) / 2);\n    if (arr[mi] < x) {\n      lo = mi;\n    } else {\n      hi = mi;\n    }\n  }\n  return hi;\n}\n\nexport const accumulate = (arr: number[]) => {\n  return arr.map((psum => (val: number) => psum += val)(0));\n}\n\nexport const weightedPicker = (weights: number[]) => {\n  console.assert(weights.every(w => w > 0));\n  const partial_sums = accumulate(weights);\n  const total_sum = partial_sums.pop()!;\n  return () => {\n    const rand = Math.random() * total_sum;\n    return lowerBound(partial_sums, rand);\n  }\n}\n\ntype point = number[];\n\nexport const generateSequenceFromIfs = (ifs: number[][], iteration: number) => {\n  let points: point[] = [];\n  let [x, y] = [0, 0];\n\n  const weights = ifs.map(row => row[6]);\n  const picker = weightedPicker(weights);\n  Array(iteration).fill(0).forEach(() => {\n    points.push([x, y]);\n    // eslint-disable-next-line\n    const [a, b, c, d, e, f, _] = ifs[picker()];\n    [x, y] = [a * x + b * y + e, c * x + d * y + f];\n  });\n  return points;\n}\n\nexport const rescale = (width: number, height: number, sequence: point[]) => {\n  const xs = sequence.map(([x, _]) => x);\n  const ys = sequence.map(([_, y]) => y);\n  const [xmin, xmax] = [Math.min(...xs), Math.max(...xs)];\n  const [ymin, ymax] = [Math.min(...ys), Math.max(...ys)];\n  const scale = Math.max(xmax - xmin, ymax - ymin)\n  return sequence.map(([x, y]) => [\n    Math.floor((x - xmin) / scale * (width - 1)),\n    Math.floor((y - ymin) / scale * (height - 1))\n  ]);\n}\n\nexport const sequenceToImageData = (width: number, height: number, sequence: point[]) => {\n  const resclaed: point[] = rescale(width, height, sequence);\n  const board: number[][] = Array(height).fill(0).map(() => Array(width).fill(0));\n  resclaed.forEach(([x, y]) => {\n    board[y][x] = 1;\n  });\n  const arr = board.flatMap(row =>\n    row.flatMap(b => [(1 - b) * 255, (1 - b) * 255, (1 - b) * 255, 255])\n  );\n  return createImageData(Uint8ClampedArray.from(arr), width);\n}\n\nexport const parseIfs = (input: string) => {\n  return input.split('\\n')\n    .map(s => s.split(/[\\s,]+/).filter(c => c !== \"\").map(c => parseFloat(c)))\n    .filter(r => r.length > 0)\n}","import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { generateSequenceFromIfs, sequenceToImageData, parseIfs } from './library'\n\nconst DEFAULT_IFS_STRING = `0.00   0.00   0.00  0.16  0.0  0.00   0.01\n0.85   0.04  -0.04  0.85  0.0  1.60   0.85\n0.20  -0.26   0.23  0.22  0.0  1.60   0.07\n-0.15   0.28   0.26  0.24  0.0  0.44   0.07`\n\nconst SIZE = 256;\nconst MARGIN = 20;\n\ninterface CanvasProps {\n  ifs: number[][];\n  iteration: number;\n  width?: number;\n  height?: number;\n  style?: React.CSSProperties;\n}\n\nconst Canvas = (props: CanvasProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const context = canvasRef.current!.getContext('2d')!;\n    const sequence = generateSequenceFromIfs(props.ifs, props.iteration);\n    const imageData = sequenceToImageData(SIZE, SIZE, sequence);\n    context.putImageData(imageData, MARGIN, MARGIN);\n  }, [props.ifs]);\n  return <canvas ref={canvasRef} {...props} />;\n}\n\nconst IfsForm = () => {\n  const [ifsString, setIfsString] = useState(DEFAULT_IFS_STRING);\n  const [iterationString, setIterationString] = useState(\"50000\");\n\n  const [ifs, setIfs] = useState(parseIfs(ifsString));\n  const [iteration, setIteration] = useState(parseInt(iterationString));\n\n  const handleIfsChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setIfsString(event.target.value);\n  };\n\n  const handleIterationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIterationString(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    setIfs(parseIfs(ifsString));\n    setIteration(parseInt(iterationString));\n    event.preventDefault();\n  };\n\n  return (\n    <div>\n      <Canvas\n        ifs={ifs}\n        iteration={iteration}\n        width={SIZE + MARGIN * 2}\n        height={SIZE + MARGIN * 2}\n        style={{ border: \"1px solid #000000\" }}\n      />\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>\n            Iteration:\n          <input\n              type=\"text\"\n              value={iterationString}\n              onChange={handleIterationChange}\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            IFS:\n          <textarea\n              value={ifsString}\n              onChange={handleIfsChange}\n              rows={10}\n              cols={60}\n            />\n          </label>\n        </div>\n        <input type=\"submit\" value=\"Refresh\" />\n      </form>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <IfsForm />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}